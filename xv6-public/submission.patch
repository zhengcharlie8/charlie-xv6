From 72c11fc086066ff24705a19c03312a997ca731be Mon Sep 17 00:00:00 2001
From: Example <example@example.com>
Date: Sun, 3 Nov 2019 02:34:47 +0000
Subject: [PATCH 1/2] Submission

---
 clonetest.c  |  72 ++++++++++++++++++++++++++++
 defs.h       |   6 +++
 jointest.c   |  45 ++++++++++++++++++
 locktest.c   |  81 ++++++++++++++++++++++++++++++++
 proc.c       | 129 +++++++++++++++++++++++++++++++++++++++++++++++----
 syscall.c    |   9 +++-
 syscall.h    |   5 ++
 sysproc.c    |  46 ++++++++++++++++++
 ticketlock.h |   6 +++
 user.h       |   6 +++
 usys.S       |   5 ++
 x86.h        |   9 ++++
 12 files changed, 410 insertions(+), 9 deletions(-)
 create mode 100644 clonetest.c
 create mode 100644 jointest.c
 create mode 100644 locktest.c
 create mode 100644 ticketlock.h

diff --git a/clonetest.c b/clonetest.c
new file mode 100644
index 0000000..db8d65f
--- /dev/null
+++ b/clonetest.c
@@ -0,0 +1,72 @@
+/*
+Walks through an example of the clone() syscall. Prints results to stdout.
+*/
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+#define PGSIZE 0x1000
+
+// this variable should be accessible and modifiable by the child
+int sharedVal = 20;
+
+// this function will be run by the cloned process
+// it takes a void* argument which will be dereferenced to an integer pointer
+void func(void *arg)
+{
+  int pid = getpid();
+  printf(1, "Child: pid is %d\n", pid);
+  printf(1, "Child: Dereferenced function arg to %d\n", *(int*) arg);
+  *(int*) arg += 10;
+  printf(1, "Child: Incremented arg's value by 10. arg is now %d\n", *(int*) arg);
+  sharedVal += 10;
+  printf(1, "Child: Incremented sharedVal by 10. sharedVal is now %d\n", sharedVal);
+
+  exit();
+  printf(1, "ERROR: Child continued past exit()\n");
+}
+
+int main(int argc, char *argv[])
+{
+  int parent_pid, child_pid;
+  char *stack_bottom;
+  int test_val = 0;
+
+  parent_pid = getpid();
+  printf(1, "Parent: pid is %d\n", parent_pid);
+
+  // expand address space by 1 page
+  // `stack_bottom` is now the address of the bottom of the new page
+  stack_bottom = sbrk(PGSIZE);
+
+  // run clone(), providing the function to be run, the address
+  // to an arg, and the address of the bottom of the newly-
+  // allocated page
+  child_pid = clone(&func, (void*) &test_val, stack_bottom);
+
+  // sleep while the cloned process runs
+  // we do this so that we can run this test without using join()
+  sleep(10);
+
+  printf(1, "Parent: pid of cloned thread is %d\n", child_pid);
+  if (child_pid <= parent_pid)
+  {
+    printf(1, "Error: Child pid should be greater than parent pid\n");
+  }
+
+  printf(1, "Parent: test_val is now %d\n", test_val);
+  if (test_val != 10)
+  {
+    printf(1, "Error: test_val should have been incremented by 10\n");
+  }
+
+  printf(1, "Parent: sharedVal is now %d\n", sharedVal);
+  if (sharedVal != 30)
+  {
+    printf(1, "Error: sharedVal should have been incremented to 30\n");
+  }
+
+  printf(1, "Test finished\n");
+  exit();
+  printf(1, "ERROR: Parent continued past exit()\n");
+}
diff --git a/defs.h b/defs.h
index 82fb982..61f11c3 100644
--- a/defs.h
+++ b/defs.h
@@ -9,6 +9,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct ticketlock;
 
 // bio.c
 void            binit(void);
@@ -33,6 +34,11 @@ void            fileinit(void);
 int             fileread(struct file*, char*, int n);
 int             filestat(struct file*, struct stat*);
 int             filewrite(struct file*, char*, int n);
+int clone(void(*fcn)(void*), void *arg, void *stack);
+int join(void);
+void initlock_t(struct ticketlock *lk);
+void acquire_t(struct ticketlock *lk);
+void release_t(struct ticketlock *lk);
 
 // fs.c
 void            readsb(int dev, struct superblock *sb);
diff --git a/jointest.c b/jointest.c
new file mode 100644
index 0000000..e5f12f8
--- /dev/null
+++ b/jointest.c
@@ -0,0 +1,45 @@
+/*
+Walks through an example of the clone() syscall. Prints results to stdout.
+*/
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+#define PGSIZE 0x1000
+
+// this function will be run by the cloned process
+void func(void *arg)
+{
+  exit();
+}
+
+int main(int argc, char *argv[])
+{
+  int child_pid;
+  char *stack_bottom;
+
+  // test join() before any threads were created: should return -1
+  int freed_pid = join();
+  if (freed_pid != -1)
+  {
+    printf(1, "Error: join() result should be -1 if this process has no threads\n");
+  }
+
+  // expand address space by 1 page
+  // `stack_bottom` is now the address of the bottom of the new page
+  stack_bottom = sbrk(PGSIZE);
+
+  // run clone(), and provide the address to the test value, as well as the stack
+  child_pid = clone(&func, (void*) 0, stack_bottom);
+
+  freed_pid = join();
+
+  // make sure freed_pid = child_pid
+  if (freed_pid != child_pid)
+  {
+    printf(1, "Error: join() did not return the child's pid\n");
+  }
+
+  printf(1, "Test finished\n");
+  exit();
+}
diff --git a/locktest.c b/locktest.c
new file mode 100644
index 0000000..3492209
--- /dev/null
+++ b/locktest.c
@@ -0,0 +1,81 @@
+/*
+Runs several tests of the ticketlock.
+*/
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "ticketlock.h"
+
+#define PGSIZE 0x1000
+
+// glabal variable
+int sharedVal = 0;
+int numAdditions = 200;
+struct ticketlock lock;
+
+void child_func(void *sleep_s) // TODO: WHAT ARE THE UNITS OF SLEEP?
+{
+  int pid = getpid();
+  sleep((int) sleep_s);
+
+  for (int i = 0; i < numAdditions; i++)
+  {
+    printf(1, "(%d) i is %d\n", pid, i);
+    acquire_t(&lock);
+    sharedVal++;
+    release_t(&lock);
+  }
+  printf(1, "(%d) Finished\n", pid);
+  exit();
+}
+
+void test_single_process()
+{
+  initlock_t(&lock);
+
+  for (int i = 0; i < numAdditions; i++)
+  {
+    acquire_t(&lock);
+    sharedVal++;
+    release_t(&lock);
+  }
+
+  printf(1, "sharedVal is now %d\n", sharedVal);
+}
+
+void test_cloned_process()
+{
+  initlock_t(&lock);
+  char *stack;
+  stack = sbrk(PGSIZE);
+  clone(&child_func, (void*) 0, stack);
+  join();
+}
+
+void test_two_cloned_processes()
+{
+  initlock_t(&lock);
+  char *stack1, *stack2;
+
+  stack1 = sbrk(PGSIZE);
+  clone(&child_func, (void*) 10, stack1);
+
+  stack2 = sbrk(PGSIZE);
+  clone(&child_func, (void*) 0, stack2);
+
+  join();
+  join();
+}
+
+int main(int argc, char *argv[])  // TODO: INCLUDE WIKIPEDIA TICKETLOCK PAGE IN README
+{
+  printf(1, "Testing single process\n");
+  test_single_process();
+  printf(1, "Testing cloned process\n");
+  test_cloned_process();
+  printf(1, "Testing two cloned processes\n");
+  test_two_cloned_processes();
+
+  printf(1, "Parent: sharedVal is now %d\n", sharedVal);
+  exit();
+}
diff --git a/proc.c b/proc.c
index 806b1b1..250adf4 100644
--- a/proc.c
+++ b/proc.c
@@ -6,6 +6,7 @@
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
+#include "ticketlock.h"
 
 struct {
   struct spinlock lock;
@@ -32,16 +33,128 @@ cpuid() {
   return mycpu()-cpus;
 }
 
-// Must be called with interrupts disabled to avoid the caller being
-// rescheduled between reading lapicid and running through the loop.
+int clone(void(*fcn)(void*), void *arg, void *stack) {
+   int i;
+   struct proc *np;
+   struct proc *curproc = myproc();
+   if(((uint) stack % PGSIZE) != 0)
+          return -1;
+      if((curproc->sz - (uint) stack) < PGSIZE)
+        return -1;
+   // Allocate process.
+   if ((np = allocproc()) == 0) {
+     return -1;
+   }
+   np->pgdir = curproc->pgdir;
+   np->sz = curproc->sz;
+   np->parent = curproc;
+   *np->tf = *curproc->tf;
+      uint user_stack[2];
+      user_stack[0] = 0xffffffff;
+      user_stack[1] = (uint) arg;
+      uint stack_top = (uint) stack + PGSIZE;
+      stack_top -= 8;
+      if (copyout(np->pgdir, stack_top, user_stack, 8) < 0) {
+	        return -1;
+        }
+np->tf->ebp = (uint) stack_top;
+np->tf->esp = (uint) stack_top;
+// set instruction pointer to address of function
+np->tf->eip = (uint) fcn;
+   // Clear %eax so that fork returns 0 in the child.
+   np->tf->eax = 0;
+
+   for (i = 0; i < NOFILE; i++)
+     if (curproc->ofile[i]) np->ofile[i] = filedup(curproc->ofile[i]);
+   np->cwd = idup(curproc->cwd);
+
+   safestrcpy(np->name, curproc->name, sizeof(curproc->name));
+
+   acquire(&ptable.lock);
+      np->state = RUNNABLE;
+   release(&ptable.lock);
+
+   return np->pid;
+}
+int join(void) {
+ struct proc *p;
+ int havethreads, pid;
+   struct proc *curproc = myproc();
+
+   acquire(&ptable.lock);
+   for(;;){
+     // Scan through table looking for exited children.
+     havethreads = 0;
+     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+          if(!(p->pgdir == curproc->pgdir))
+            continue;
+       if(p->parent != curproc)
+         continue;
+       havethreads = 1;
+       if(p->state == ZOMBIE){
+         // Found one.
+         pid = p->pid;
+         kfree(p->kstack);
+         p->kstack = 0;
+         p->pid = 0;
+         p->parent = 0;
+         p->name[0] = 0;
+         p->killed = 0;
+         p->state = UNUSED;
+         release(&ptable.lock);
+         return pid;
+       }
+     }
+
+     // No point waiting if we don't have any children.
+     if(!havethreads || curproc->killed){
+       release(&ptable.lock);
+       return -1;
+     }
+
+     // Wait for children to exit.  (See wakeup1 call in proc_exit.)
+     sleep(curproc, &ptable.lock);  //DOC: wait-sleep
+   }
+ }
+ int holding_t(struct ticketlock *lk)
+ {
+   if(lk->proc==myproc() && lk->turn != lk->ticket)
+    return 0;
+    else
+    return -1;
+ }
+ void initlock_t(struct ticketlock *lk)
+{
+  lk->ticket=0;
+  lk->turn=0;
+  lk->proc=0;
+}
+void acquire_t(struct ticketlock *lk)
+{
+  if(holding_t(lk) == 0)
+  panic("lock already acquired");
+  uint num = fetch_and_add(&(lk->ticket),1);
+  while(lk->turn != num){
+    if(lk->turn==num)
+      break;
+    }
+    lk->proc = myproc();
+}
+void release_t(struct ticketlock *lk)
+{
+  if(holding_t(lk)==-1)
+    panic("Lock already acquired");
+  lk->proc = 0;
+  lk->turn = lk->turn+1;
+}
 struct cpu*
 mycpu(void)
 {
   int apicid, i;
-  
+
   if(readeflags()&FL_IF)
     panic("mycpu called with interrupts enabled\n");
-  
+
   apicid = lapicid();
   // APIC IDs are not guaranteed to be contiguous. Maybe we should have
   // a reverse map, or reserve a register to store &cpus[i].
@@ -124,7 +237,7 @@ userinit(void)
   extern char _binary_initcode_start[], _binary_initcode_size[];
 
   p = allocproc();
-  
+
   initproc = p;
   if((p->pgdir = setupkvm()) == 0)
     panic("userinit: out of memory?");
@@ -275,7 +388,7 @@ wait(void)
   struct proc *p;
   int havekids, pid;
   struct proc *curproc = myproc();
-  
+
   acquire(&ptable.lock);
   for(;;){
     // Scan through table looking for exited children.
@@ -325,7 +438,7 @@ scheduler(void)
   struct proc *p;
   struct cpu *c = mycpu();
   c->proc = 0;
-  
+
   for(;;){
     // Enable interrupts on this processor.
     sti();
@@ -418,7 +531,7 @@ void
 sleep(void *chan, struct spinlock *lk)
 {
   struct proc *p = myproc();
-  
+
   if(p == 0)
     panic("sleep");
 
diff --git a/syscall.c b/syscall.c
index ee85261..1e1b210 100644
--- a/syscall.c
+++ b/syscall.c
@@ -60,7 +60,7 @@ argptr(int n, char **pp, int size)
 {
   int i;
   struct proc *curproc = myproc();
- 
+
   if(argint(n, &i) < 0)
     return -1;
   if(size < 0 || (uint)i >= curproc->sz || (uint)i+size > curproc->sz)
@@ -103,6 +103,8 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_clone(void);
+extern int sys_join(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +128,11 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_clone]   sys_clone,
+[SYS_join]    sys_join,
+[SYS_initlock_t] sys_initlock_t,
+[SYS_acquire_t] sys_acquire_t,
+[SYS_release_t] sys_release_t,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index bc5f356..bdca517 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,8 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_clone  22
+#define SYS_join   23
+#define SYS_initlock_t 24
+#define SYS_acquire_t 25
+#define SYS_release_t 26
diff --git a/sysproc.c b/sysproc.c
index 0686d29..b9072fc 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -41,7 +41,39 @@ sys_getpid(void)
 {
   return myproc()->pid;
 }
+int sys_initlock_t(void)
+{
+  struct ticketlock *tl;
+  if (argptr(0, (char**)&tl, sizeof(struct ticketlock*)) < 0)
+  {
+    return -1;
+  }
+
+  initlock_t(tl);
+  return 0;
+}
+int sys_acquire_t(void)
+{
+  struct ticketlock *tl;
+  if (argptr(0, (char**)&tl, sizeof(struct ticketlock*)) < 0)
+  {
+    return -1;
+  }
+
+  acquire_t(tl);
+  return 0;
+}
+int sys_release_t(void)
+{
+  struct ticketlock *tl;
+  if (argptr(0, (char**)&tl, sizeof(struct ticketlock*)) < 0)
+  {
+    return -1;
+  }
 
+  release_t(tl);
+  return 0;
+}
 int
 sys_sbrk(void)
 {
@@ -76,6 +108,20 @@ sys_sleep(void)
   release(&tickslock);
   return 0;
 }
+int sys_clone(void) {
+	// To be filled in...
+  void *fcn, *arg, *stack;
+  if (argptr(0, (void *)&fcn, sizeof(void *)) < 0)
+	 return -1;
+  if (argptr(1, (void*)&arg, sizeof(void *)) < 0)
+   return -1;
+  if (argptr(2,(void*) &stack, sizeof(void *)) < 0)
+    return -1;
+  return clone(fcn, arg, stack);
+}
+int sys_join(void) {
+  return join();
+}
 
 // return how many clock tick interrupts have occurred
 // since start.
diff --git a/ticketlock.h b/ticketlock.h
new file mode 100644
index 0000000..3feb13f
--- /dev/null
+++ b/ticketlock.h
@@ -0,0 +1,6 @@
+// Spinning ticket lock.
+typedef struct ticketlock {
+  uint ticket;        // current ticket number being served
+  uint turn;          // next ticket number to be given
+  struct proc *proc;  // process currently holding the lock
+} ticketlock;
diff --git a/user.h b/user.h
index 4f99c52..b5b3464 100644
--- a/user.h
+++ b/user.h
@@ -1,5 +1,6 @@
 struct stat;
 struct rtcdate;
+struct ticketlock;
 
 // system calls
 int fork(void);
@@ -23,6 +24,11 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int clone(void(*fcn)(void*), void *arg, void *stack);
+void initlock_t(struct ticketlock *lk);
+void acquire_t(struct ticketlock *lk);
+void release_t(struct ticketlock *lk);
+int join(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/usys.S b/usys.S
index 8bfd8a1..1c109d4 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,8 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(clone)
+SYSCALL(join)
+SYSCALL(initlock_t)
+SYSCALL(acquire_t)
+SYSCALL(release_t)
diff --git a/x86.h b/x86.h
index 07312a5..bc78d0d 100644
--- a/x86.h
+++ b/x86.h
@@ -8,6 +8,15 @@ inb(ushort port)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
   return data;
 }
+static inline uint
+fetch_and_add(volatile uint *addr, uint val)
+{
+  asm volatile("lock; xaddl %%eax, %2;" :
+               "=a" (val) :
+               "a" (val) , "m" (*addr) :
+               "memory");
+  return val;
+}
 
 static inline void
 insl(int port, void *addr, int cnt)
-- 
2.17.1


From 302ac3278e8960ecb916ee6d6f745d88c918fdd2 Mon Sep 17 00:00:00 2001
From: Example <example@example.com>
Date: Sun, 3 Nov 2019 03:00:17 +0000
Subject: [PATCH 2/2] Submission

---
 Makefile         |   6 +-
 proc.c           | 228 +++++++++--------
 submission.patch | 628 +++++++++++++++++++++++++++++++++++++++++++++++
 syscall.c        |   3 +
 4 files changed, 748 insertions(+), 117 deletions(-)
 create mode 100644 submission.patch

diff --git a/Makefile b/Makefile
index 09d790c..ec2976f 100644
--- a/Makefile
+++ b/Makefile
@@ -32,7 +32,7 @@ OBJS = \
 # TOOLPREFIX = i386-jos-elf
 
 # Using native tools (e.g., on X86 Linux)
-#TOOLPREFIX = 
+#TOOLPREFIX =
 
 # Try to infer the correct TOOLPREFIX if not set
 ifndef TOOLPREFIX
@@ -181,13 +181,14 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_clonetest\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
 
 -include *.d
 
-clean: 
+clean:
 	rm -f *.tex *.dvi *.idx *.aux *.log *.ind *.ilg \
 	*.o *.d *.asm *.sym vectors.S bootblock entryother \
 	initcode initcode.out kernel xv6.img fs.img kernelmemfs \
@@ -253,6 +254,7 @@ EXTRA=\
 	printf.c umalloc.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
+	clonetest.c\
 
 dist:
 	rm -rf dist
diff --git a/proc.c b/proc.c
index 250adf4..dbb1608 100644
--- a/proc.c
+++ b/proc.c
@@ -32,121 +32,6 @@ int
 cpuid() {
   return mycpu()-cpus;
 }
-
-int clone(void(*fcn)(void*), void *arg, void *stack) {
-   int i;
-   struct proc *np;
-   struct proc *curproc = myproc();
-   if(((uint) stack % PGSIZE) != 0)
-          return -1;
-      if((curproc->sz - (uint) stack) < PGSIZE)
-        return -1;
-   // Allocate process.
-   if ((np = allocproc()) == 0) {
-     return -1;
-   }
-   np->pgdir = curproc->pgdir;
-   np->sz = curproc->sz;
-   np->parent = curproc;
-   *np->tf = *curproc->tf;
-      uint user_stack[2];
-      user_stack[0] = 0xffffffff;
-      user_stack[1] = (uint) arg;
-      uint stack_top = (uint) stack + PGSIZE;
-      stack_top -= 8;
-      if (copyout(np->pgdir, stack_top, user_stack, 8) < 0) {
-	        return -1;
-        }
-np->tf->ebp = (uint) stack_top;
-np->tf->esp = (uint) stack_top;
-// set instruction pointer to address of function
-np->tf->eip = (uint) fcn;
-   // Clear %eax so that fork returns 0 in the child.
-   np->tf->eax = 0;
-
-   for (i = 0; i < NOFILE; i++)
-     if (curproc->ofile[i]) np->ofile[i] = filedup(curproc->ofile[i]);
-   np->cwd = idup(curproc->cwd);
-
-   safestrcpy(np->name, curproc->name, sizeof(curproc->name));
-
-   acquire(&ptable.lock);
-      np->state = RUNNABLE;
-   release(&ptable.lock);
-
-   return np->pid;
-}
-int join(void) {
- struct proc *p;
- int havethreads, pid;
-   struct proc *curproc = myproc();
-
-   acquire(&ptable.lock);
-   for(;;){
-     // Scan through table looking for exited children.
-     havethreads = 0;
-     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-          if(!(p->pgdir == curproc->pgdir))
-            continue;
-       if(p->parent != curproc)
-         continue;
-       havethreads = 1;
-       if(p->state == ZOMBIE){
-         // Found one.
-         pid = p->pid;
-         kfree(p->kstack);
-         p->kstack = 0;
-         p->pid = 0;
-         p->parent = 0;
-         p->name[0] = 0;
-         p->killed = 0;
-         p->state = UNUSED;
-         release(&ptable.lock);
-         return pid;
-       }
-     }
-
-     // No point waiting if we don't have any children.
-     if(!havethreads || curproc->killed){
-       release(&ptable.lock);
-       return -1;
-     }
-
-     // Wait for children to exit.  (See wakeup1 call in proc_exit.)
-     sleep(curproc, &ptable.lock);  //DOC: wait-sleep
-   }
- }
- int holding_t(struct ticketlock *lk)
- {
-   if(lk->proc==myproc() && lk->turn != lk->ticket)
-    return 0;
-    else
-    return -1;
- }
- void initlock_t(struct ticketlock *lk)
-{
-  lk->ticket=0;
-  lk->turn=0;
-  lk->proc=0;
-}
-void acquire_t(struct ticketlock *lk)
-{
-  if(holding_t(lk) == 0)
-  panic("lock already acquired");
-  uint num = fetch_and_add(&(lk->ticket),1);
-  while(lk->turn != num){
-    if(lk->turn==num)
-      break;
-    }
-    lk->proc = myproc();
-}
-void release_t(struct ticketlock *lk)
-{
-  if(holding_t(lk)==-1)
-    panic("Lock already acquired");
-  lk->proc = 0;
-  lk->turn = lk->turn+1;
-}
 struct cpu*
 mycpu(void)
 {
@@ -645,3 +530,116 @@ procdump(void)
     cprintf("\n");
   }
 }
+
+int clone(void(*fcn)(void*), void *arg, void *stack) {
+   int i;
+   struct proc *np;
+   struct proc *curproc = myproc();
+   if(((uint) stack % PGSIZE) != 0)
+          return -1;
+   if((curproc->sz - (uint) stack) < PGSIZE)
+        return -1;
+   if ((np = allocproc()) == 0)
+     return -1;
+   np->pgdir = curproc->pgdir;
+   np->sz = curproc->sz;
+   np->parent = curproc;
+   *np->tf = *curproc->tf;
+      uint user_stack[2];
+      user_stack[0] = 0xffffffff;
+      user_stack[1] = (uint) arg;
+      uint stack_top = (uint) stack + PGSIZE;
+      stack_top -= 8;
+      if (copyout(np->pgdir, stack_top, user_stack, 8) < 0) {
+	        return -1;
+        }
+np->tf->ebp = (uint) stack_top;
+np->tf->esp = (uint) stack_top;
+// set instruction pointer to address of function
+np->tf->eip = (uint) fcn;
+   // Clear %eax so that fork returns 0 in the child.
+   np->tf->eax = 0;
+
+   for (i = 0; i < NOFILE; i++)
+     if (curproc->ofile[i]) np->ofile[i] = filedup(curproc->ofile[i]);
+   np->cwd = idup(curproc->cwd);
+
+   safestrcpy(np->name, curproc->name, sizeof(curproc->name));
+
+   acquire(&ptable.lock);
+      np->state = RUNNABLE;
+   release(&ptable.lock);
+
+   return np->pid;
+}
+int join(void) {
+ struct proc *p;
+ int havethreads, pid;
+   struct proc *curproc = myproc();
+
+   acquire(&ptable.lock);
+   for(;;){
+     // Scan through table looking for exited children.
+     havethreads = 0;
+     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+          if(!(p->pgdir == curproc->pgdir))
+            continue;
+       if(p->parent != curproc)
+         continue;
+       havethreads = 1;
+       if(p->state == ZOMBIE){
+         // Found one.
+         pid = p->pid;
+         kfree(p->kstack);
+         p->kstack = 0;
+         p->pid = 0;
+         p->parent = 0;
+         p->name[0] = 0;
+         p->killed = 0;
+         p->state = UNUSED;
+         release(&ptable.lock);
+         return pid;
+       }
+     }
+
+     // No point waiting if we don't have any children.
+     if(!havethreads || curproc->killed){
+       release(&ptable.lock);
+       return -1;
+     }
+
+     // Wait for children to exit.  (See wakeup1 call in proc_exit.)
+     sleep(curproc, &ptable.lock);  //DOC: wait-sleep
+   }
+ }
+ int holding_t(struct ticketlock *lk)
+ {
+   if(lk->proc==myproc() && lk->turn != lk->ticket)
+    return 0;
+    else
+    return -1;
+ }
+ void initlock_t(struct ticketlock *lk)
+{
+  lk->ticket=0;
+  lk->turn=0;
+  lk->proc=0;
+}
+void acquire_t(struct ticketlock *lk)
+{
+  if(holding_t(lk) == 0)
+  panic("lock already acquired");
+  uint num = fetch_and_add(&(lk->ticket),1);
+  while(lk->turn != num){
+    if(lk->turn==num)
+      break;
+    }
+    lk->proc = myproc();
+}
+void release_t(struct ticketlock *lk)
+{
+  if(holding_t(lk)==-1)
+    panic("Lock already acquired");
+  lk->proc = 0;
+  lk->turn = lk->turn+1;
+}
diff --git a/submission.patch b/submission.patch
new file mode 100644
index 0000000..5f8cc36
--- /dev/null
+++ b/submission.patch
@@ -0,0 +1,628 @@
+From 72c11fc086066ff24705a19c03312a997ca731be Mon Sep 17 00:00:00 2001
+From: Example <example@example.com>
+Date: Sun, 3 Nov 2019 02:34:47 +0000
+Subject: [PATCH] Submission
+
+---
+ clonetest.c  |  72 ++++++++++++++++++++++++++++
+ defs.h       |   6 +++
+ jointest.c   |  45 ++++++++++++++++++
+ locktest.c   |  81 ++++++++++++++++++++++++++++++++
+ proc.c       | 129 +++++++++++++++++++++++++++++++++++++++++++++++----
+ syscall.c    |   9 +++-
+ syscall.h    |   5 ++
+ sysproc.c    |  46 ++++++++++++++++++
+ ticketlock.h |   6 +++
+ user.h       |   6 +++
+ usys.S       |   5 ++
+ x86.h        |   9 ++++
+ 12 files changed, 410 insertions(+), 9 deletions(-)
+ create mode 100644 clonetest.c
+ create mode 100644 jointest.c
+ create mode 100644 locktest.c
+ create mode 100644 ticketlock.h
+
+diff --git a/clonetest.c b/clonetest.c
+new file mode 100644
+index 0000000..db8d65f
+--- /dev/null
++++ b/clonetest.c
+@@ -0,0 +1,72 @@
++/*
++Walks through an example of the clone() syscall. Prints results to stdout.
++*/
++#include "types.h"
++#include "stat.h"
++#include "user.h"
++
++#define PGSIZE 0x1000
++
++// this variable should be accessible and modifiable by the child
++int sharedVal = 20;
++
++// this function will be run by the cloned process
++// it takes a void* argument which will be dereferenced to an integer pointer
++void func(void *arg)
++{
++  int pid = getpid();
++  printf(1, "Child: pid is %d\n", pid);
++  printf(1, "Child: Dereferenced function arg to %d\n", *(int*) arg);
++  *(int*) arg += 10;
++  printf(1, "Child: Incremented arg's value by 10. arg is now %d\n", *(int*) arg);
++  sharedVal += 10;
++  printf(1, "Child: Incremented sharedVal by 10. sharedVal is now %d\n", sharedVal);
++
++  exit();
++  printf(1, "ERROR: Child continued past exit()\n");
++}
++
++int main(int argc, char *argv[])
++{
++  int parent_pid, child_pid;
++  char *stack_bottom;
++  int test_val = 0;
++
++  parent_pid = getpid();
++  printf(1, "Parent: pid is %d\n", parent_pid);
++
++  // expand address space by 1 page
++  // `stack_bottom` is now the address of the bottom of the new page
++  stack_bottom = sbrk(PGSIZE);
++
++  // run clone(), providing the function to be run, the address
++  // to an arg, and the address of the bottom of the newly-
++  // allocated page
++  child_pid = clone(&func, (void*) &test_val, stack_bottom);
++
++  // sleep while the cloned process runs
++  // we do this so that we can run this test without using join()
++  sleep(10);
++
++  printf(1, "Parent: pid of cloned thread is %d\n", child_pid);
++  if (child_pid <= parent_pid)
++  {
++    printf(1, "Error: Child pid should be greater than parent pid\n");
++  }
++
++  printf(1, "Parent: test_val is now %d\n", test_val);
++  if (test_val != 10)
++  {
++    printf(1, "Error: test_val should have been incremented by 10\n");
++  }
++
++  printf(1, "Parent: sharedVal is now %d\n", sharedVal);
++  if (sharedVal != 30)
++  {
++    printf(1, "Error: sharedVal should have been incremented to 30\n");
++  }
++
++  printf(1, "Test finished\n");
++  exit();
++  printf(1, "ERROR: Parent continued past exit()\n");
++}
+diff --git a/defs.h b/defs.h
+index 82fb982..61f11c3 100644
+--- a/defs.h
++++ b/defs.h
+@@ -9,6 +9,7 @@ struct spinlock;
+ struct sleeplock;
+ struct stat;
+ struct superblock;
++struct ticketlock;
+ 
+ // bio.c
+ void            binit(void);
+@@ -33,6 +34,11 @@ void            fileinit(void);
+ int             fileread(struct file*, char*, int n);
+ int             filestat(struct file*, struct stat*);
+ int             filewrite(struct file*, char*, int n);
++int clone(void(*fcn)(void*), void *arg, void *stack);
++int join(void);
++void initlock_t(struct ticketlock *lk);
++void acquire_t(struct ticketlock *lk);
++void release_t(struct ticketlock *lk);
+ 
+ // fs.c
+ void            readsb(int dev, struct superblock *sb);
+diff --git a/jointest.c b/jointest.c
+new file mode 100644
+index 0000000..e5f12f8
+--- /dev/null
++++ b/jointest.c
+@@ -0,0 +1,45 @@
++/*
++Walks through an example of the clone() syscall. Prints results to stdout.
++*/
++#include "types.h"
++#include "stat.h"
++#include "user.h"
++
++#define PGSIZE 0x1000
++
++// this function will be run by the cloned process
++void func(void *arg)
++{
++  exit();
++}
++
++int main(int argc, char *argv[])
++{
++  int child_pid;
++  char *stack_bottom;
++
++  // test join() before any threads were created: should return -1
++  int freed_pid = join();
++  if (freed_pid != -1)
++  {
++    printf(1, "Error: join() result should be -1 if this process has no threads\n");
++  }
++
++  // expand address space by 1 page
++  // `stack_bottom` is now the address of the bottom of the new page
++  stack_bottom = sbrk(PGSIZE);
++
++  // run clone(), and provide the address to the test value, as well as the stack
++  child_pid = clone(&func, (void*) 0, stack_bottom);
++
++  freed_pid = join();
++
++  // make sure freed_pid = child_pid
++  if (freed_pid != child_pid)
++  {
++    printf(1, "Error: join() did not return the child's pid\n");
++  }
++
++  printf(1, "Test finished\n");
++  exit();
++}
+diff --git a/locktest.c b/locktest.c
+new file mode 100644
+index 0000000..3492209
+--- /dev/null
++++ b/locktest.c
+@@ -0,0 +1,81 @@
++/*
++Runs several tests of the ticketlock.
++*/
++#include "types.h"
++#include "stat.h"
++#include "user.h"
++#include "ticketlock.h"
++
++#define PGSIZE 0x1000
++
++// glabal variable
++int sharedVal = 0;
++int numAdditions = 200;
++struct ticketlock lock;
++
++void child_func(void *sleep_s) // TODO: WHAT ARE THE UNITS OF SLEEP?
++{
++  int pid = getpid();
++  sleep((int) sleep_s);
++
++  for (int i = 0; i < numAdditions; i++)
++  {
++    printf(1, "(%d) i is %d\n", pid, i);
++    acquire_t(&lock);
++    sharedVal++;
++    release_t(&lock);
++  }
++  printf(1, "(%d) Finished\n", pid);
++  exit();
++}
++
++void test_single_process()
++{
++  initlock_t(&lock);
++
++  for (int i = 0; i < numAdditions; i++)
++  {
++    acquire_t(&lock);
++    sharedVal++;
++    release_t(&lock);
++  }
++
++  printf(1, "sharedVal is now %d\n", sharedVal);
++}
++
++void test_cloned_process()
++{
++  initlock_t(&lock);
++  char *stack;
++  stack = sbrk(PGSIZE);
++  clone(&child_func, (void*) 0, stack);
++  join();
++}
++
++void test_two_cloned_processes()
++{
++  initlock_t(&lock);
++  char *stack1, *stack2;
++
++  stack1 = sbrk(PGSIZE);
++  clone(&child_func, (void*) 10, stack1);
++
++  stack2 = sbrk(PGSIZE);
++  clone(&child_func, (void*) 0, stack2);
++
++  join();
++  join();
++}
++
++int main(int argc, char *argv[])  // TODO: INCLUDE WIKIPEDIA TICKETLOCK PAGE IN README
++{
++  printf(1, "Testing single process\n");
++  test_single_process();
++  printf(1, "Testing cloned process\n");
++  test_cloned_process();
++  printf(1, "Testing two cloned processes\n");
++  test_two_cloned_processes();
++
++  printf(1, "Parent: sharedVal is now %d\n", sharedVal);
++  exit();
++}
+diff --git a/proc.c b/proc.c
+index 806b1b1..250adf4 100644
+--- a/proc.c
++++ b/proc.c
+@@ -6,6 +6,7 @@
+ #include "x86.h"
+ #include "proc.h"
+ #include "spinlock.h"
++#include "ticketlock.h"
+ 
+ struct {
+   struct spinlock lock;
+@@ -32,16 +33,128 @@ cpuid() {
+   return mycpu()-cpus;
+ }
+ 
+-// Must be called with interrupts disabled to avoid the caller being
+-// rescheduled between reading lapicid and running through the loop.
++int clone(void(*fcn)(void*), void *arg, void *stack) {
++   int i;
++   struct proc *np;
++   struct proc *curproc = myproc();
++   if(((uint) stack % PGSIZE) != 0)
++          return -1;
++      if((curproc->sz - (uint) stack) < PGSIZE)
++        return -1;
++   // Allocate process.
++   if ((np = allocproc()) == 0) {
++     return -1;
++   }
++   np->pgdir = curproc->pgdir;
++   np->sz = curproc->sz;
++   np->parent = curproc;
++   *np->tf = *curproc->tf;
++      uint user_stack[2];
++      user_stack[0] = 0xffffffff;
++      user_stack[1] = (uint) arg;
++      uint stack_top = (uint) stack + PGSIZE;
++      stack_top -= 8;
++      if (copyout(np->pgdir, stack_top, user_stack, 8) < 0) {
++	        return -1;
++        }
++np->tf->ebp = (uint) stack_top;
++np->tf->esp = (uint) stack_top;
++// set instruction pointer to address of function
++np->tf->eip = (uint) fcn;
++   // Clear %eax so that fork returns 0 in the child.
++   np->tf->eax = 0;
++
++   for (i = 0; i < NOFILE; i++)
++     if (curproc->ofile[i]) np->ofile[i] = filedup(curproc->ofile[i]);
++   np->cwd = idup(curproc->cwd);
++
++   safestrcpy(np->name, curproc->name, sizeof(curproc->name));
++
++   acquire(&ptable.lock);
++      np->state = RUNNABLE;
++   release(&ptable.lock);
++
++   return np->pid;
++}
++int join(void) {
++ struct proc *p;
++ int havethreads, pid;
++   struct proc *curproc = myproc();
++
++   acquire(&ptable.lock);
++   for(;;){
++     // Scan through table looking for exited children.
++     havethreads = 0;
++     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
++          if(!(p->pgdir == curproc->pgdir))
++            continue;
++       if(p->parent != curproc)
++         continue;
++       havethreads = 1;
++       if(p->state == ZOMBIE){
++         // Found one.
++         pid = p->pid;
++         kfree(p->kstack);
++         p->kstack = 0;
++         p->pid = 0;
++         p->parent = 0;
++         p->name[0] = 0;
++         p->killed = 0;
++         p->state = UNUSED;
++         release(&ptable.lock);
++         return pid;
++       }
++     }
++
++     // No point waiting if we don't have any children.
++     if(!havethreads || curproc->killed){
++       release(&ptable.lock);
++       return -1;
++     }
++
++     // Wait for children to exit.  (See wakeup1 call in proc_exit.)
++     sleep(curproc, &ptable.lock);  //DOC: wait-sleep
++   }
++ }
++ int holding_t(struct ticketlock *lk)
++ {
++   if(lk->proc==myproc() && lk->turn != lk->ticket)
++    return 0;
++    else
++    return -1;
++ }
++ void initlock_t(struct ticketlock *lk)
++{
++  lk->ticket=0;
++  lk->turn=0;
++  lk->proc=0;
++}
++void acquire_t(struct ticketlock *lk)
++{
++  if(holding_t(lk) == 0)
++  panic("lock already acquired");
++  uint num = fetch_and_add(&(lk->ticket),1);
++  while(lk->turn != num){
++    if(lk->turn==num)
++      break;
++    }
++    lk->proc = myproc();
++}
++void release_t(struct ticketlock *lk)
++{
++  if(holding_t(lk)==-1)
++    panic("Lock already acquired");
++  lk->proc = 0;
++  lk->turn = lk->turn+1;
++}
+ struct cpu*
+ mycpu(void)
+ {
+   int apicid, i;
+-  
++
+   if(readeflags()&FL_IF)
+     panic("mycpu called with interrupts enabled\n");
+-  
++
+   apicid = lapicid();
+   // APIC IDs are not guaranteed to be contiguous. Maybe we should have
+   // a reverse map, or reserve a register to store &cpus[i].
+@@ -124,7 +237,7 @@ userinit(void)
+   extern char _binary_initcode_start[], _binary_initcode_size[];
+ 
+   p = allocproc();
+-  
++
+   initproc = p;
+   if((p->pgdir = setupkvm()) == 0)
+     panic("userinit: out of memory?");
+@@ -275,7 +388,7 @@ wait(void)
+   struct proc *p;
+   int havekids, pid;
+   struct proc *curproc = myproc();
+-  
++
+   acquire(&ptable.lock);
+   for(;;){
+     // Scan through table looking for exited children.
+@@ -325,7 +438,7 @@ scheduler(void)
+   struct proc *p;
+   struct cpu *c = mycpu();
+   c->proc = 0;
+-  
++
+   for(;;){
+     // Enable interrupts on this processor.
+     sti();
+@@ -418,7 +531,7 @@ void
+ sleep(void *chan, struct spinlock *lk)
+ {
+   struct proc *p = myproc();
+-  
++
+   if(p == 0)
+     panic("sleep");
+ 
+diff --git a/syscall.c b/syscall.c
+index ee85261..1e1b210 100644
+--- a/syscall.c
++++ b/syscall.c
+@@ -60,7 +60,7 @@ argptr(int n, char **pp, int size)
+ {
+   int i;
+   struct proc *curproc = myproc();
+- 
++
+   if(argint(n, &i) < 0)
+     return -1;
+   if(size < 0 || (uint)i >= curproc->sz || (uint)i+size > curproc->sz)
+@@ -103,6 +103,8 @@ extern int sys_unlink(void);
+ extern int sys_wait(void);
+ extern int sys_write(void);
+ extern int sys_uptime(void);
++extern int sys_clone(void);
++extern int sys_join(void);
+ 
+ static int (*syscalls[])(void) = {
+ [SYS_fork]    sys_fork,
+@@ -126,6 +128,11 @@ static int (*syscalls[])(void) = {
+ [SYS_link]    sys_link,
+ [SYS_mkdir]   sys_mkdir,
+ [SYS_close]   sys_close,
++[SYS_clone]   sys_clone,
++[SYS_join]    sys_join,
++[SYS_initlock_t] sys_initlock_t,
++[SYS_acquire_t] sys_acquire_t,
++[SYS_release_t] sys_release_t,
+ };
+ 
+ void
+diff --git a/syscall.h b/syscall.h
+index bc5f356..bdca517 100644
+--- a/syscall.h
++++ b/syscall.h
+@@ -20,3 +20,8 @@
+ #define SYS_link   19
+ #define SYS_mkdir  20
+ #define SYS_close  21
++#define SYS_clone  22
++#define SYS_join   23
++#define SYS_initlock_t 24
++#define SYS_acquire_t 25
++#define SYS_release_t 26
+diff --git a/sysproc.c b/sysproc.c
+index 0686d29..b9072fc 100644
+--- a/sysproc.c
++++ b/sysproc.c
+@@ -41,7 +41,39 @@ sys_getpid(void)
+ {
+   return myproc()->pid;
+ }
++int sys_initlock_t(void)
++{
++  struct ticketlock *tl;
++  if (argptr(0, (char**)&tl, sizeof(struct ticketlock*)) < 0)
++  {
++    return -1;
++  }
++
++  initlock_t(tl);
++  return 0;
++}
++int sys_acquire_t(void)
++{
++  struct ticketlock *tl;
++  if (argptr(0, (char**)&tl, sizeof(struct ticketlock*)) < 0)
++  {
++    return -1;
++  }
++
++  acquire_t(tl);
++  return 0;
++}
++int sys_release_t(void)
++{
++  struct ticketlock *tl;
++  if (argptr(0, (char**)&tl, sizeof(struct ticketlock*)) < 0)
++  {
++    return -1;
++  }
+ 
++  release_t(tl);
++  return 0;
++}
+ int
+ sys_sbrk(void)
+ {
+@@ -76,6 +108,20 @@ sys_sleep(void)
+   release(&tickslock);
+   return 0;
+ }
++int sys_clone(void) {
++	// To be filled in...
++  void *fcn, *arg, *stack;
++  if (argptr(0, (void *)&fcn, sizeof(void *)) < 0)
++	 return -1;
++  if (argptr(1, (void*)&arg, sizeof(void *)) < 0)
++   return -1;
++  if (argptr(2,(void*) &stack, sizeof(void *)) < 0)
++    return -1;
++  return clone(fcn, arg, stack);
++}
++int sys_join(void) {
++  return join();
++}
+ 
+ // return how many clock tick interrupts have occurred
+ // since start.
+diff --git a/ticketlock.h b/ticketlock.h
+new file mode 100644
+index 0000000..3feb13f
+--- /dev/null
++++ b/ticketlock.h
+@@ -0,0 +1,6 @@
++// Spinning ticket lock.
++typedef struct ticketlock {
++  uint ticket;        // current ticket number being served
++  uint turn;          // next ticket number to be given
++  struct proc *proc;  // process currently holding the lock
++} ticketlock;
+diff --git a/user.h b/user.h
+index 4f99c52..b5b3464 100644
+--- a/user.h
++++ b/user.h
+@@ -1,5 +1,6 @@
+ struct stat;
+ struct rtcdate;
++struct ticketlock;
+ 
+ // system calls
+ int fork(void);
+@@ -23,6 +24,11 @@ int getpid(void);
+ char* sbrk(int);
+ int sleep(int);
+ int uptime(void);
++int clone(void(*fcn)(void*), void *arg, void *stack);
++void initlock_t(struct ticketlock *lk);
++void acquire_t(struct ticketlock *lk);
++void release_t(struct ticketlock *lk);
++int join(void);
+ 
+ // ulib.c
+ int stat(const char*, struct stat*);
+diff --git a/usys.S b/usys.S
+index 8bfd8a1..1c109d4 100644
+--- a/usys.S
++++ b/usys.S
+@@ -29,3 +29,8 @@ SYSCALL(getpid)
+ SYSCALL(sbrk)
+ SYSCALL(sleep)
+ SYSCALL(uptime)
++SYSCALL(clone)
++SYSCALL(join)
++SYSCALL(initlock_t)
++SYSCALL(acquire_t)
++SYSCALL(release_t)
+diff --git a/x86.h b/x86.h
+index 07312a5..bc78d0d 100644
+--- a/x86.h
++++ b/x86.h
+@@ -8,6 +8,15 @@ inb(ushort port)
+   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+   return data;
+ }
++static inline uint
++fetch_and_add(volatile uint *addr, uint val)
++{
++  asm volatile("lock; xaddl %%eax, %2;" :
++               "=a" (val) :
++               "a" (val) , "m" (*addr) :
++               "memory");
++  return val;
++}
+ 
+ static inline void
+ insl(int port, void *addr, int cnt)
+-- 
+2.17.1
+
diff --git a/syscall.c b/syscall.c
index 1e1b210..3fa16ac 100644
--- a/syscall.c
+++ b/syscall.c
@@ -105,6 +105,9 @@ extern int sys_write(void);
 extern int sys_uptime(void);
 extern int sys_clone(void);
 extern int sys_join(void);
+extern int sys_initlock_t(void);
+extern int sys_acquire_t(void);
+extern int sys_release_t(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
-- 
2.17.1

